5. 코드 설계 - Network

Q. Packet을 사용한 이유는?

A. 2가지 이유가 있었습니다.

    - 메시지를 처리하는 기준을 만들고 싶어서
    - 메시지큐의 처리속도를 높히기 위해

현재 Packet이 Type, Payload로 이루어져있고
Type는 헤더, Payload는 내용을 담당하고 있습니다.
Handler에서도 Packet.Payload를 활용해 메시지 처리를 하고있습니다.

코드의 확장성 부분에서 볼때
유저의 메시지 형식을 정해주고 그에 맞게 Packet처리를 하면
이후 코드 작성 방식에 구조가 잡히는 결과가 나올 것입니다.

두번째 이유에 대해서 설명하자면
메시지큐는 처리로직이 간단해야 한다고 생각합니다.
메시지큐의 처리속도가 TCP에서 들어오는 메시지의 양보다 느리다면
메시지가 점점 큐에 쌓이는 현상이 발생할 것이고
이것으로 인해 메모리 사용량이 점차 증가하다 쓰레싱이 발생할 것입니다.
따라서 Network에서 처리할 수 있는 전처리를 모두 끝낸 후
메시지큐에 Packet을 적재함으로써
메시지큐 스레드가 Worker 스레드에 빠르게 일을 전달해줄 수 있는 상황이 됩니다.



Q. Worker스레드가 Packet을 파싱하면?

A. 서버 코드가 복잡해지고 서버의 부담이 심해집니다.

이 문제에서 가장 중요한 것은
"서버에서 감당할 수 있는 양의 메시지를 안정적으로 처리하는 것" 이라고 생각합니다.
TCP와 메시지큐 처리 로직이 간단해져서 공급이 많아진다면
결국 Worker 스레드가 많은 일을 할 수 밖에 없습니다.
이때 Worker 스레드가 처리속도를 따라가지 못하게 된다면
메시지큐에서 처리되지 못하는 메시지가 점차 쌓이게 되고, 
할당 스레드를 모두 사용하거나 추가적인 스레드의 사용으로 인해서 데드락과 기아상태의 위험이 커집니다. 
따라서 TCP 스레드의 처리가 못따라 간다면 서버를 수평/수직적 확장을 하거나
유저에게 쿨다운을 거는 방식을 사용하는것이 현재 상황에서 적잘하다고 판단했습니다.