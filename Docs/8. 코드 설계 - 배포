8. 코드 설계 - 배포


실제 배포를 진행하였던 프로젝트는
ProjectHarpseal 문서를 읽어주시기 바랍니다.
주소 : https://bit.ly/3ZdAmfs
해당 문서는 서버의 AWS 배포 밑 최적화를 했던 경험을 정리했습니다.



Q. 서버 CI/CD 파이프라인을 구성한다고 가정해보고, 어떤 스택을 사용할것인지?
(내용이 너무 길어 마지막에 요약이 있습니다.)

A. GithubHook - Jenkins(EC2) - AWS(EC2, S3, RDB...) 구조를 사용할 것 같습니다.

먼저, 코드 저장소는 Github를 사용할 것입니다.
개인의 수준에서는 버전관리, Git을 활용한 다양한 협업기능 등 너무나도 매력적인 스택입니다.
GitHub를 쓰기 때문에, 코드 배포 스택은 크게 2가지로 나뉘게 됩니다.

    - GithubAction
    - GithubHook

둘의 차이점은 다음과 같습니다.

    1. GithubAction
        - Github에서 제공하는 자동 빌드 및 배포 기술입니다.
        - 코드 Commit시 유저가 작성한 Flow에 맞게 작업을 합니다.
    
    2. GithubHook
        - Github과 다른 프로그램에 갈고리(Hook)을 걸어놓는 방식입니다.
        - 코드 Commit시 Hook이 발동됩니다.
        - Hook에 걸린 프로그램은 Commit이 진행되었다는것을 알게 되고, 이를 통해 Flow를 진행할 수 있습니다.


두 스택의 차이점은 "코드 Build의 주체가 어디인가?" 입니다.
GithubAction은 Github에, 
GithubHook은 Hook이 걸린 다른 프로그램 입니다.
코드를 안정적으로 관리하기 위해서, 그리고 편하게 디버깅을 하기 위해
개발자가 Build를 관리할 수 있는 것이 좋다고 생각했습니다.

또한 GithubAction은 수많은 개발자가 함께 사용하는 스택이기 때문에
개인에게 할당되는 자원이 한정적입니다. 따라서 코드의 규모가 커질 경우 
빌드 시간이 길어질 수 있다는 것 또한 매력적이지 않았습니다.
GithubAction의 기능을 끌어올릴려면 추가적인 비용이 들어가는 것 또한 꺼려집니다.


두번째로, CI/CD 주체는 Jenkins를 활용할 것입니다.
이는 위에서 GithubHook을 선택하는것과 복합적으로 생각했습니다.
우선, GithubAction이 무료버전에서 성능에 좋지 않다는 이야기를 위에 했었습니다.
하지만 Jenkins는 사용자의 컴퓨터 성능에 큰 영향을 받게 됩니다.
따라서 설정에 따라 개인 컴퓨터에서 빌드를 진행하여도 되고, 
클라우드에 서버를 올릴 것이라면 사람이 적은 시간대를 골라서
Batch 처리를 하는 동안 빌드 및 배포에 리소스를 사용하고, 
서버를 '점검시간'이라는 명목하에 닫는것 또한 가능해 집니다.
이 외에도 Jenkins의 Credencial 관리를 통해 손쉽게 다른 플러그인과 연결할 수도 있고
Build 각 과정과 성공/실패 여부를 시각적으로 잘 알려주기 때문에
코드 배포과정이 얼마나 이루어졌는지도 알 수 있습니다.
그리고 Jenkins 명령어를 통해서 EC2에 명령어를 입력하여
R/G 배포를 진행하는 등 다양한 장점이 있습니다.


출처 : https://apidog.com/kr/blog/best-ci-cd-tools-2/
Jenkins를 대체할 다른 스택은 어떤게 있는지 비교해 보겠습니다.
Top3와 AWS 스택을 나열해 보면 다음과 같습니다.

    1. Jenkins
    2. GitLab CI/CD
    3. Circle CL
    4. AWS CI/CD Tools

이중 Jenkins가 압도적으로 많은 유저층과 플러그인을 제공하며
GitLab CI/CD와 Circle CL은 비용적인 문제가 발생하게 됩니다.
AWS의 경우 잘 만들어진 CI/CD 툴이긴 하지만
AWS의 보안그룹 설정이나 권한 문제로 인해서 진입장벽이 높으며, 
배포가 복잡해질수록 급격하게 힘들어지게 됩니다.

Jenkins의 단점인 초기설정, 인터페이스, 유지보수 업데이트의 문제의 경우
초기설정은 인터넷 레퍼런스가 정말 잘 되어있어서 큰 어려움은 없었고
인터페이스는 기능적인 편리함은 좋았으며
유지보수 업데이트는 Jenkins에서 LTS버전을 제공하기에 큰 어려움은 없었습니다.

-> AWS는 클라우드를 AWS로 정했기에 추가적으로 고민했습니다.


세번째로, 클라우드는 AWS를 사용할 것입니다.
클라우드 서비스는 크게 3가지로 분류할 수 있습니다.

    1. AWS (Amazone)
    2. Azure (Microsoft)
    3. GCP (Google)

각각의 장단점은 명확합니다.

    1. AWS
        장점 : 업계1위, 다양한 서트파티툴(Jenkins...)와의 통합이 원활함
        단점 : 구조가 복잡하고 요금체계의 복합적인 계산이 필요함(기능을 사용할때 발생하는 모든 비용 계산필요)

    2. Azure
        장점 : Microsoft 생태계와 통합이 탁월함
        단점 : 일부지역에 리전이 AWS만큼 방대하지 않아 지역별 성능편차 
    네트워크 왕복 지연시간 통계 : http://learn.microsoft.com/en-us/azure/networking/azure-network-latency?tabs=APAC%2CAustralasia

    3. GCP
        장점 : 구글 내부에서 사용하는 기술(K8S)을 상용화한 만큼 컨테이너/데이터분석/AI에 강점
        단점 : 시장 점유율이 낮아 자료가 상대적으로 적음


이때, 저는 AWS를 선택하였습니다.
서트파티 툴과의 통합이 원활하다는 이유도 있지만
Docker를 활용한 컨테이너 기술을 사용할 예정인데, 윈도우에서 사용시 WSL/Hyper-v 등의 추가적인 가상화 기술이 필요합니다.
Azure는 Windows 환경에서 강점을 가지기에 후순위로 미뤘습니다.
출처 : https://docs.docker.com/desktop/setup/install/windows-install/

GCP는 AI에 강점을 가지고, 자료가 부족하다는 점에서 후순위로 미뤄졌으며
결과적으로 AWS의 EC2 환경을 사용하고, Ubuntu 운영체제를 사용할 것 같습니다.
Ubuntu, 우분투는 리눅스를 기반으로 개발된 리눅스 배포판이기에, Docker와의 호환이 잘 됩니다.
AWS와의 통합 성능은 Amazone Linux2에 비해서 떨어질 수 있지만, 
방대한 커뮤니티와 K8S 생태계에서 자주 쓰이는 만큼 다양한 자료를 쉽게 접할 수 있는 장점이 있습니다.
추후 프로젝트가 커진다면, AWS를 그대로 사용할때 Amazone Linux2로 마이그레이션 하는것을 고려할 수 있습니다.



