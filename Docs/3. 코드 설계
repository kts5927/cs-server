3 코드 설계

이 문서는 코드를 설계할때 어떤 기준을 선택했는지 기술한 문서입니다.


Q. 파일을 구성할때 가장 먼저 생각한것은?

A. 코드의 확장/유지보수/테스트 입니다.
적은 코드에 간단한 로직이라 모놀리식으로 코딩을 했을때 훨씬 간단하고 쉬웠을 것입니다.
하지만 이 프로젝트는 OOP를 중점으로 설계된 코드입니다.
적은 코드이기 때문에 구조를 설계하는 비용을 충분히 감수할만하다고 생각했으며, 
추후 코드가 추가될때 큰 도움이 될 것이라 기대합니다.

예를들어 Command 폴더를 살펴보면 다음과 같이 이루어져 있습니다.

    - Handler에서 사용하는 인터페이스
    - 싱글톤으로 구성된 Handler
    - Command의 자동 등록/실행을 담당하는 Registry
    - Registry에서 사용되는 코드 등록을 위한 Table

이러한 각 클레스의 역할분담은 코드의 기능을 정확하게 나누고, 
다른 클레스와의 결합도를 낮추는 결과를 달성하였습니다.
또한 추후 코드를 추가할때 오버로딩/오버라이딩 등을 활용하여
코드의 재사용성 또한 기대할 수 있습니다.


Q. 싱글톤 패턴을 주력으로 사용한 이유는?

A. 서버의 코드가 다른 패턴을 쓸만큼 복잡하지 않기 때문입니다.

RoomManager, CommandRegistry, MessageDispatcher와 같은 자원은 공유해야 합니다.
유저가 서버에 접속했을때, 서버는 관리 객체가 하나씩만 있으면 충분합니다.

서버가 좀더 복잡하다면 다양한 패턴을 사용할 수 있습니다.
이 채팅서버가 만약 텍스트 RPG서버로 발전하게 된다고 가정해 보겠습니다.
특정 직업에 맞는 유저의 캐릭터를 객체로 만들고, 
유저별로 객체를 다르게 관리해야 하기 때문에 프로토타입 패턴을 사용한 후
세부 스탯을 DB에서 받아 갱신하는 형식으로 사용할 수 있습니다.

또한 설정이 복잡해진다면
Builder 패턴을 활용해 복잡한 각 설정의 세부사항을 조절할 수 있습니다.
