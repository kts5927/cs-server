6. 코드 설계 - Room

Q. Room과 RoomManager를 나눈 이유는?

A. 기능을 명확하게 나누기 위해서 입니다.

    Room - 방(Room)의 기본적인 기능만을 수행
    RoomManager - 방(Room)을 관리하기 위한 기능을 수행

Room 코드의 기능 분리는 OOP의 단일 책임 원리에 의해 다양한 이점을 가집니다.
Room/RoomManager 모두 하나의 책임(Room 생성 / Room 관리)만 가져
코드를 확장하고 유지/보수 하는데 있어 용이하고, 
Test를 함에 있어서도 수월해 집니다.

또한 추후 분산처리 구조로 가더라도
RoomManager가 로드밸런싱, 리소스메니저의 역활을 할 수 있습니다.



Q. Room을 객체로 관리하는 이유는?

A. 두가지 이유가 있습니다.

첫번째는 Room 별로 관리하기 위해서 입니다.

Room을 개별 관리하지 않고, List에 유저의 번호를 매겨 Broadcast시 판단하는 방법도 있습니다.
하지만 이럴 경우 유저의 수가 많아질때, List에서 유저를 찾는데 시간이 많이 걸릴 뿐더러, 
Room 별로 List를 계속해서 만든다면 List의 관리가 복잡해지고, 
Room을 객체로 관리하는것이 구조면에서 비슷하며, 관리하기도 편해집니다.

예를들어, 특정 방에 운영자가 Broadcast 하고싶다면
그 방의 ID를 찾아서 Broadcast(Session, string)을 활용하면 손쉽게 가능합니다.
또한 Room 별로 유저를 관리하거나, 전체 유저의 리스트를 찾는것에도
RoomManager에 전체 Room에 GetNicknames 함수를 실행하면
손쉽게 리스트를 받아볼 수도 있습니다.
또한 특정 Room을 손쉽게 만들거나 제거할 수도 있고, 특정 Room만 Cooldown 시간을 늘리는 등
다양한 방면에서 이점을 볼 수 있습니다.

이러한 방법은 각 Room마다 유저가 들어가 있고, Room별로 관리가 되기 때문에
만약 전체 유저의 리스트를 뽑는 기능을 수행하더라도 O(n)의 연산을 하게 되어
서버에 부담이 적을것으로 예상됩니다.


두번째는 Room별로 Lock 관리를 편하게 하기 위해서 입니다.

병렬처리 과정에서 발생하는 충돌을 해결하기 위해
Room._membersLock 이라는 객체를 만들었습니다.
lock (_membersLock)을 활용함으로써 유저의 들어오기, 나가기, 인원수 확인 등
Room의 인원수 변동이 있을때 안정적으로 lock을 걸 수 있습니다.
만약 Room 객체를 사용하지 않고, List를 사용한다면
List가 계속 늘어나는 구조를 가지거나, Session마다 락을 일일이 거는 등
복잡한 로직이 만들어졌을 것입니다.